## CODE:

class Solution {
    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
       int n=nums1.length;
       int m=nums2.length;
       int arr[]=new int[n+m];
       int i=0,j=0,k=0;

       while(i<n && j<m)
       {
         if(nums1[i] < nums2[j])
         {
            arr[k++]=nums1[i++];
         }
         else
         {
            arr[k++]=nums2[j++];
         }
       }
       while(i<n)
       {
        arr[k++]=nums1[i++];
       }
       while(j<m)
       {
        arr[k++]=nums2[j++];
       }
       int total=n+m;
       if(total%2==1)
       {
         return arr[total/2];
       }
       else
       {
        return arr[((total/2-1)+(total/2))/2];
       }

    }
    public static void main(String[] args)
    {
        int a[]={1,3};
        int b[]={2};
        System.out.print(findMedianSortedArrays(a,b));

        int c[]={1,2};
        int d[]={3,4};
        System.out.print(findMedianSortedArrays(c,d));

    }
}


# ðŸ§® Median of Two Sorted Arrays (Java)

This Java program merges two sorted arrays and returns the **median** of the combined array.

---

## ðŸ“Œ Problem Statement

Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the **median** of the two sorted arrays.

> This version uses the simple merge technique with time complexity **O(m + n)**.

---

## ðŸ’¡ How It Works

1. Merge the two sorted arrays into a single sorted array.
2. If the total number of elements is **odd**, return the middle element.
3. If it is **even**, return the average of the two middle elements.

---

## ðŸ§ª Sample Code Output

```java
int a[] = {1, 3};
int b[] = {2};
// Merged array: [1, 2, 3]
// Output: Median 1: 2.0

int c[] = {1, 2};
int d[] = {3, 4};
// Merged array: [1, 2, 3, 4]
// Output: Median 2: 2.5
